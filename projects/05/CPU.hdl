// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Mux16 (a=instruction, b=outAlu, sel=instruction[15], out=outForARegister);

        Mux (a=true, b=instruction[5], sel=instruction[15], out=loadARegister);
        ARegister (in=outForARegister, load=loadARegister, out=outARegister, out[0..14]=addressM);

        // opCode | a-bit | c
        // -------|-------|---
        //   0    |  0    | 0
        //   0    |  1    | 0
        //   1    |  0    | 0
        //   1    |  1    | 1
        And (a=instruction[15], b=instruction[12], out=selAOrInM);
        Mux16 (a=outARegister, b=inM, sel=selAOrInM, out=aOrMInputToAlu);

        Mux (a=true, b=instruction[11], sel=instruction[15], out=zxInputToAlu);
        Mux (a=true, b=instruction[10], sel=instruction[15], out=nxInputToAlu);
        Mux (a=false, b=instruction[9], sel=instruction[15], out=zyInputToAlu);
        Mux (a=false, b=instruction[8], sel=instruction[15], out=nyInputToAlu);
        Mux (a=false, b=instruction[7], sel=instruction[15], out=fInputToAlu);
        Mux (a=false, b=instruction[6], sel=instruction[15], out=noInputToAlu);
        ALU (
            x=dInputToAlu,
            y=aOrMInputToAlu,
            zx=zxInputToAlu,
            nx=nxInputToAlu,
            zy=zyInputToAlu,
            ny=nyInputToAlu,
            f=fInputToAlu,
            no=noInputToAlu,
            out=outAlu,
            out=outM,
            zr=zr,
            ng=ng
        );
        Not (in=zr, out=notZr);
        Not (in=ng, out=notNg);

        Mux (a=false, b=instruction[4], sel=instruction[15], out=loadDRegister);
        DRegister (in=outAlu, load=loadDRegister, out=dInputToAlu);

        And (a=instruction[15], b=instruction[3], out=writeM);

        // PC
        // If it's a C-instruction (instruction[15]):
        //     If (jump bits are 001) and (zr and ng are 0): //
        //         set load to 1.
        //     If (jump bits are 010) and (zr is 1): //
        //         set load to 1.
        //     If (jump bits are 011) and (ng is 0): //
        //         set load to 1.
        //     If (jump bits are 100) and (ng is 1): //
        //         set load to 1.
        //     If (jump bits are 101) and (zr is 0): //
        //         set load to 1.
        //     If (jump bits are 110) and (zr or ng is 0): //
        //         set load to 1.
        //     If (jump bits are 111): //
        //         set load to 1.
        //     Else:
        //         set load to 0.

        DMux8Way (
            in=instruction[15],
            sel[2]=instruction[2],
            sel[1]=instruction[1],
            sel[0]=instruction[0],
            a=noJump,
            b=jumpGt,
            c=jumpEq,
            d=jumpGe,
            e=jumpLt,
            f=jumpNe,
            g=jumpLe,
            h=jumpUnconditionally
        );

        And (a=jumpGt, b=notZr, out=jumpGtA);
        And (a=jumpGtA, b=notNg, out=outJumpGt);

        And (a=jumpEq, b=zr, out=outJumpEq);

        And (a=jumpGe, b=notNg, out=outJumpGe);

        And (a=jumpLt, b=ng, out=outJumpLt);

        And (a=jumpNe, b=notZr, out=outJumpNe);

        Or (a=zr, b=ng, out=zrOrNgIsZero);
        And (a=jumpLe, b=zrOrNgIsZero, out=outJumpLe);

        Or8Way (
          in[7]=false,
          in[6]=outJumpGt,
          in[5]=outJumpEq,
          in[4]=outJumpGe,
          in[3]=outJumpLt,
          in[2]=outJumpNe,
          in[1]=outJumpLe,
          in[0]=jumpUnconditionally,
          out=loadPc
        );

        PC (
            in=outARegister,
            load=loadPc,
            inc=true,
            reset=reset,
            out[0..14]=pc
        );
}
